{"version":3,"sources":["logo.svg","components/QTitle.jsx","components/QAnswer.jsx","components/QButton.jsx","components/constants.jsx","components/QInput.jsx","components/QImg.jsx","components/QMain.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","QTitle","_ref","txt","react_default","a","createElement","className","MCQOption","val","handleChange","isSel","concat","onClick","QAnswer","_ref2","answers","handleClick","sel","console","log","map","ans","i","QAnswer_MCQOption","includes","QButton","types","SIMPLE_MCQ","COMPLEX_MCQ","IMG_MCQ","BRIEF_ANS","QInput","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleText","e","target","value","setState","handleSub","state","onChange","React","Component","QImg_MCQOption","QMain","selected","_this2","_this$props","item","pos","answer","ch","choices","type","components_QTitle","question","components_QAnswer","changeAns","components_QButton","max","QImg","components_QInput","items","id","placeholder","App","submitQuiz","quizDone","changeAnswer","bulk","toConsumableArray","bulkItem","filter","push","traverseQues","dir","newDisplay","currentDisplay","length","indx","components_QMain","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6542b32b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nconst QTitle = ({ txt }) => {\r\n  return <div className=\"qtitle\">{txt}</div>;\r\n};\r\n\r\nexport default QTitle;\r\n","import React from 'react';\r\n\r\nconst MCQOption = ({ val, handleChange, isSel }) => (\r\n  <div className=\"mcq\">\r\n    <div className=\"check-cont\">\r\n      <div\r\n        className={`checkmark ${isSel && 'is-sel'}`}\r\n        onClick={handleChange}\r\n      />\r\n    </div>\r\n\r\n    <div className=\"opt-text\">{val}</div>\r\n  </div>\r\n);\r\n\r\nconst QAnswer = ({ answers, handleClick, sel }) => {\r\n  console.log(answers);\r\n  return (\r\n    <div className=\"ans-cont\">\r\n      {answers.map((ans, i) => {\r\n        return (\r\n          <MCQOption\r\n            val={ans}\r\n            isSel={sel.includes(i)}\r\n            handleChange={() => handleClick(i)}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QAnswer;\r\n","import React from 'react';\r\n\r\nconst QButton = ({ handleClick, txt }) => {\r\n  return (\r\n    <div className=\"btn\" onClick={handleClick}>\r\n      {txt}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QButton;\r\n","const types = {\r\n  SIMPLE_MCQ: 'simple_mcq',\r\n  COMPLEX_MCQ: 'complex_mcq',\r\n  IMG_MCQ: 'img_mcq',\r\n  BRIEF_ANS: 'brief_ans'\r\n};\r\n\r\nexport default types;\r\n","import React from 'react';\r\n\r\nclass QInput extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      txt: ''\r\n    };\r\n  }\r\n  handleText = e => {\r\n    const txt = e.target.value;\r\n    this.setState(\r\n      {\r\n        txt\r\n      },\r\n      () => {\r\n        this.props.handleSub(txt);\r\n      }\r\n    );\r\n  };\r\n  render() {\r\n    return <textarea onChange={this.handleText} />;\r\n  }\r\n}\r\n\r\nexport default QInput;\r\n","import React from 'react';\r\n\r\nconst MCQOption = ({ val, handleChange, isSel }) => (\r\n  <div className=\"mcq\">\r\n    <div className={`checkmark ${isSel && 'is-sel'}`} onClick={handleChange} />\r\n    <div className=\"img-mock\" />\r\n    <div className=\"opt-text\">{val}</div>\r\n  </div>\r\n);\r\n\r\nconst QAnswer = ({ answers, handleClick, sel }) => {\r\n  console.log(answers);\r\n  return (\r\n    <div className=\"ans-cont-img\">\r\n      {answers.map((ans, i) => {\r\n        return (\r\n          <MCQOption\r\n            val={ans}\r\n            isSel={sel.includes(i)}\r\n            handleChange={() => handleClick(i)}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QAnswer;\r\n","import React from 'react';\r\nimport QTitle from './QTitle';\r\nimport QAnswer from './QAnswer';\r\nimport QButton from './QButton';\r\nimport types from './constants';\r\nimport QInput from './QInput';\r\nimport QImg from './QImg';\r\n\r\nclass QMain extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      selected: []\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { item, pos, sel } = this.props;\r\n    const selected = sel.answer;\r\n    console.log(item);\r\n    const ch = item.choices;\r\n    console.log(ch);\r\n    if (item.type == types.SIMPLE_MCQ || item.type == types.COMPLEX_MCQ) {\r\n      return (\r\n        <div>\r\n          <QTitle txt={item.question} />\r\n          <QAnswer\r\n            sel={selected}\r\n            answers={item.choices}\r\n            handleClick={i => this.props.changeAns(pos, i)}\r\n          />\r\n          <div className=\"btn-cont\">\r\n            {pos > 0 && (\r\n              <QButton\r\n                txt={'Previous'}\r\n                handleClick={() => this.props.handleClick(-1)}\r\n              />\r\n            )}\r\n            {pos < this.props.max - 1 && (\r\n              <QButton\r\n                txt={'Next'}\r\n                handleClick={() => this.props.handleClick(1)}\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (item.type == types.IMG_MCQ) {\r\n      return (\r\n        <div>\r\n          <QTitle txt={item.question} />\r\n          <QImg\r\n            answers={item.choices}\r\n            sel={selected}\r\n            handleClick={i => this.props.changeAns(pos, i)}\r\n          />\r\n          <div className=\"btn-cont\">\r\n            {pos > 0 && (\r\n              <QButton\r\n                txt={'Previous'}\r\n                handleClick={() => this.props.handleClick(-1)}\r\n              />\r\n            )}\r\n            {pos < this.props.max - 1 && (\r\n              <QButton\r\n                txt={'Next'}\r\n                handleClick={() => this.props.handleClick(1)}\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    if (item.type == types.BRIEF_ANS) {\r\n      return (\r\n        <div>\r\n          <QTitle txt={item.question} />\r\n          <div>\r\n            <QInput handleSub={txt => this.props.changeAns(pos, txt)} />\r\n          </div>\r\n          <div className=\"btn-cont\">\r\n            {pos > 0 && (\r\n              <QButton\r\n                txt={'Previous'}\r\n                handleClick={() => this.props.handleClick(-1)}\r\n              />\r\n            )}\r\n            {pos < this.props.max - 1 && (\r\n              <QButton\r\n                txt={'Next'}\r\n                handleClick={() => this.props.handleClick(1)}\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    return <div className=\"error\" />;\r\n  }\r\n}\r\n\r\nexport default QMain;\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.scss';\nimport './components/QMain';\nimport QMain from './components/QMain';\nimport types from './components/constants';\n\nconst items = [\n  {\n    id: '9201',\n    type: types.SIMPLE_MCQ,\n    question: 'Vivamus tortor elit, suscipit ut sem non?',\n    choices: [\n      'purus ut faucibus',\n      'ac auctor augue',\n      'purus non enim',\n      'arcu risus quis'\n    ]\n  },\n  {\n    id: '9202',\n    type: types.COMPLEX_MCQ,\n    question: 'Nunc sed id semper risus in hendrerit gravida?',\n    choices: [\n      'purus ut faucibus',\n      'ac auctor augue',\n      'purus non enim',\n      'arcu risus quis'\n    ]\n  },\n  {\n    id: '9203',\n    type: types.IMG_MCQ,\n    question: 'Id cursus metus aliquam eleifend mi in nulla?',\n    choices: ['imgsrc1', 'imgsrc2', 'imgsrc3', 'imgsrc4']\n  },\n  {\n    id: '9204',\n    type: types.BRIEF_ANS,\n    question: 'Scelerisque purus semper eget duis at tellus at?',\n    placeholder: 'Adhuc invidunt duo ex. Eu tantas dolorum ullamcorper qui.'\n  }\n];\n\nclass App extends Component {\n  constructor() {\n    super();\n    const bulk = items.map(item => {\n      const bulkItem = {};\n      if (item.type === types.BRIEF_ANS) {\n        bulkItem.answer = '';\n      } else {\n        bulkItem.answer = [];\n      }\n      bulkItem.id = item.id;\n      bulkItem.type = item.type;\n      bulkItem.question = item.question;\n\n      return bulkItem;\n    });\n    this.state = {\n      bulk,\n      currentDisplay: 0,\n      quizDone: false\n    };\n  }\n\n  submitQuiz = () => {\n    this.setState({\n      quizDone: true\n    });\n  };\n\n  changeAnswer = (i, ans) => {\n    const bulk = [...this.state.bulk];\n    const bulkItem = bulk[i];\n    if (bulkItem.type == types.SIMPLE_MCQ || bulkItem.type == types.IMG_MCQ) {\n      bulkItem.answer = [ans];\n    } else if (bulkItem.type == types.COMPLEX_MCQ) {\n      let selected = [...bulkItem.answer];\n      console.log(i);\n      if (selected.includes(ans)) {\n        selected = selected.filter(item => item !== ans);\n      } else {\n        selected.push(ans);\n      }\n      console.log(selected);\n      bulkItem.answer = selected;\n    } else if (bulkItem.type == types.BRIEF_ANS) {\n      bulkItem.answer = ans;\n    }\n    bulk[i] = bulkItem;\n    this.setState({\n      bulk\n    });\n  };\n\n  traverseQues = dir => {\n    const newDisplay = this.state.currentDisplay + dir;\n    if (newDisplay >= 0 && newDisplay < this.state.bulk.length) {\n      this.setState({\n        currentDisplay: newDisplay\n      });\n    }\n  };\n\n  render() {\n    const indx = this.state.currentDisplay;\n\n    return (\n      <div className=\"App\">\n        <div className=\"q-num\">{indx + 1}/4</div>\n        <QMain\n          item={items[indx]}\n          sel={this.state.bulk[indx]}\n          changeAns={this.changeAnswer}\n          pos={indx}\n          handleClick={this.traverseQues}\n          max={4}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}